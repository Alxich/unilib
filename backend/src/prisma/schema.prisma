generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin", "darwin-arm64"]
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String                    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?                   @unique
  emailVerified DateTime?
  image         String?
  username      String?                   @unique
  messages      Message[]
  conversations ConversationParticipant[]
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  posts Post[] @relation("category")
}

model Post {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  content        String
  authorName     String
  createdAt      DateTime
  category       Category         @relation("category", fields: [categoryId], references: [id])
  categoryId     String
  tags           Tag[]            @relation(fields: [tagsIDs], references: [id])
  tagsIDs        String[]         @db.ObjectId
  likes          Int
  dislikes       Int
  views          Int
  comments       Comment[]        @relation(name: "CommentToPost")
  isPinned       Boolean?
  updatedAt      DateTime?
  LatestComments LatestComments[]
}

model Tag {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  posts    Post[]   @relation(fields: [postsIds], references: [id])
  postsIds String[] @db.ObjectId
}

model Comment {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  content         String
  authorName      String
  createdAt       DateTime
  likes           Int
  dislikes        Int
  post            Post      @relation(name: "CommentToPost", fields: [postId], references: [id])
  postId          String
  parentComment   Comment?  @relation(name: "CommentToComment", fields: [parentCommentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentCommentId String?
  replies         Comment[] @relation(name: "CommentToComment")
}

model LatestComments {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  author    String
  createdAt DateTime
}

model Conversation {
  id              String                    @id @default(auto()) @map("_id") @db.ObjectId
  participants    ConversationParticipant[]
  messages        Message[]                 @relation("conversationMessages")
  latestMessage   Message?                  @relation(name: "latestConversationMessage", fields: [latestMessageId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  latestMessageId String?                   @unique
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
}

model ConversationParticipant {
  id                   String       @id @default(auto()) @map("_id") @db.ObjectId
  user                 User         @relation(fields: [userId], references: [id])
  userId               String
  conversation         Conversation @relation(fields: [conversationId], references: [id])
  conversationId       String
  hasSeenLatestMessage Boolean
}

model Message {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  conversation   Conversation  @relation(name: "conversationMessages", fields: [conversationId], references: [id])
  conversationId String
  isLatestIn     Conversation? @relation("latestConversationMessage")
  sender         User          @relation(fields: [senderId], references: [id])
  senderId       String
  body           String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}
