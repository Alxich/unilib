generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin", "darwin-arm64"]
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String                    @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String?                   @unique
  emailVerified         DateTime?
  image                 String?
  banner                String?
  username              String?                   @unique
  aboutMe               String?
  posts                 Post[]                    @relation("postAuthor")
  comments              Comment[]
  likedPostIDs          String[]                  @db.ObjectId
  likedPosts            Post[]                    @relation("userLikedPosts", fields: [likedPostIDs], references: [id])
  dislikedPostIDs       String[]                  @db.ObjectId
  dislikedPosts         Post[]                    @relation("userDislikedPosts", fields: [dislikedPostIDs], references: [id])
  likedCommentIDs       String[]                  @db.ObjectId
  likedComments         Comment[]                 @relation("userLikedComments", fields: [likedCommentIDs], references: [id])
  dislikedCommentIDs    String[]                  @db.ObjectId
  dislikedComments      Comment[]                 @relation("userDislikedComments", fields: [dislikedCommentIDs], references: [id])
  messages              Message[]
  conversations         ConversationParticipant[]
  accounts              Account[]
  sessions              Session[]
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt
  subscribedCategoryIDs String[]                  @db.ObjectId
  subscribedCategories  Category[]                @relation("categorySubscribers", fields: [subscribedCategoryIDs], references: [id])
  following             Follows[]                 @relation("follower")
  followedBy            Follows[]                 @relation("following")
}

model Follows {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String @db.ObjectId
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String @db.ObjectId

  @@unique([followerId, followingId])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  title             String    @unique
  content           String
  author            User      @relation("postAuthor", fields: [authorId], references: [id])
  authorId          String    @db.ObjectId
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  likes             Int?      @default(0)
  likedByUserIDs    String[]  @db.ObjectId
  likedBy           User[]    @relation("userLikedPosts", fields: [likedByUserIDs], references: [id])
  dislikes          Int?      @default(0)
  dislikedByUserIDs String[]  @db.ObjectId
  dislikedBy        User[]    @relation("userDislikedPosts", fields: [dislikedByUserIDs], references: [id])
  views             Int       @default(0)
  comments          Comment[]
  category          Category  @relation(fields: [categoryId], references: [id])
  categoryId        String    @db.ObjectId
  tagIDs            String[]  @db.ObjectId
  tags              Tag[]     @relation("postTags", fields: [tagIDs], references: [id])
}

model Comment {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  author            User      @relation(fields: [authorId], references: [id])
  authorId          String    @db.ObjectId
  post              Post      @relation(fields: [postId], references: [id])
  postId            String    @db.ObjectId
  parent            Comment?  @relation("Replies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId          String?   @db.ObjectId
  text              String
  likes             Int?      @default(0)
  likedByUserIDs    String[]  @db.ObjectId
  likedBy           User[]    @relation("userLikedComments", fields: [likedByUserIDs], references: [id])
  dislikes          Int?      @default(0)
  dislikedByUserIDs String[]  @db.ObjectId
  dislikedBy        User[]    @relation("userDislikedComments", fields: [dislikedByUserIDs], references: [id])
  createdAt         DateTime  @default(now())
  replies           Comment[] @relation("Replies")

  @@index([authorId])
}

model Tag {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postIDs   String[] @db.ObjectId
  posts     Post[]   @relation("postTags", fields: [postIDs], references: [id])
}

model Category {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  icon            String   @unique
  banner          String   @unique
  title           String   @unique
  desc            String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  posts           Post[]
  subscriberIDs   String[] @db.ObjectId
  subscribers     User[]   @relation("categorySubscribers", fields: [subscriberIDs], references: [id])
  subscriberCount Int      @default(0)
}

model Conversation {
  id              String                    @id @default(auto()) @map("_id") @db.ObjectId
  participants    ConversationParticipant[]
  messages        Message[]                 @relation("conversationMessages")
  latestMessage   Message?                  @relation(name: "latestConversationMessage", fields: [latestMessageId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  latestMessageId String?                   @unique @db.ObjectId
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
}

model ConversationParticipant {
  id                   String       @id @default(auto()) @map("_id") @db.ObjectId
  user                 User         @relation(fields: [userId], references: [id])
  userId               String       @db.ObjectId
  conversation         Conversation @relation(fields: [conversationId], references: [id])
  conversationId       String       @db.ObjectId
  hasSeenLatestMessage Boolean
}

model Message {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  conversation   Conversation  @relation(name: "conversationMessages", fields: [conversationId], references: [id])
  conversationId String        @db.ObjectId
  isLatestIn     Conversation? @relation("latestConversationMessage")
  sender         User          @relation(fields: [senderId], references: [id])
  senderId       String        @db.ObjectId
  body           String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}
